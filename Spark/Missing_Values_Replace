############################################################################
## replacing missing values of col 'bytes'

df_t7 = df_t6.withColumn('bytes_t', when(df_t6.bytes.isNull(), bytes_rep_val)
                                         .otherwise(0))

# report output
print('##############################################')
print('# Replacing Missing values from bytes column #')
print('##############################################')
print('')
print(' > Replacing with value: ' + str(bytes_rep_val))
print(' > New Feature Name: ' + 'bytes_t')
print(' > Justificação: Valor da mediana das labels 0 e 1. É quase igual o valor')
print('')
      
## report ###############################################

# paramters
var_name = 'bytes_t'
old_df = df_t6
new_df = df_t7
      
# collect statistics : row counts
filt_report_before_all_count = old_df.count()
filt_report_before_label0_count = old_df.filter(col('depvar') == 0).count()
filt_report_before_label1_count = old_df.filter(col('depvar') == 1).count()

filt_report_after_all_count = new_df.count()
filt_report_after_label0_count = new_df.filter(col('depvar') == 0).count()
filt_report_after_label1_count = new_df.filter(col('depvar') == 1).count()

# collect statistics : NaN counts
# !! bytes = old | bytes_t = new
filt_report_before_NAN_all_count = old_df.filter(old_df.bytes.isNull()).count()
filt_report_before_NAN_label0_count = old_df.filter(old_df.bytes.isNull()).filter(col('depvar') == 0).count()
filt_report_before_NAN_label1_count = old_df.filter(old_df.bytes.isNull()).filter(col('depvar') == 1).count()

filt_report_after_NAN_all_count = new_df.filter(new_df.bytes_t.isNull()).count()
filt_report_after_NAN_label0_count = new_df.filter(new_df.bytes_t.isNull()).filter(col('depvar') == 0).count()
filt_report_after_NAN_label1_count = new_df.filter(new_df.bytes_t.isNull()).filter(col('depvar') == 1).count()


# Gather on a dataframe
df_filt_report = pd.DataFrame({'':['Total', 'class 0', 'class 1']})
df_filt_report.loc[:,'Contribution'] = [str(np.round(filt_report_before_all_count*100 / filt_report_before_all_count,3)) + '%',
                                        str(np.round(filt_report_before_label0_count*100 / filt_report_before_all_count,3))+'%', 
                                        str(np.round(filt_report_before_label1_count*100 / filt_report_before_all_count,3))+'%',]

df_filt_report.loc[:,'RowsBefore'] = [filt_report_before_all_count,
                                       filt_report_before_label0_count, 
                                       filt_report_before_label1_count]

df_filt_report.loc[:,'NaNBefore'] = [filt_report_before_NAN_all_count,
                                       filt_report_before_NAN_label0_count, 
                                       filt_report_before_NAN_label1_count]


df_filt_report.loc[:,'RowsAfter'] = [filt_report_after_all_count,
                                       filt_report_after_label0_count, 
                                       filt_report_after_label1_count]

df_filt_report.loc[:,'NaNAfter'] = [filt_report_after_NAN_all_count,
                                       filt_report_after_NAN_label0_count, 
                                       filt_report_after_NAN_label1_count]


df_filt_report.loc[:,'Replaced'] = [(filt_report_before_NAN_all_count - filt_report_after_NAN_all_count),
                                    (filt_report_before_NAN_label0_count - filt_report_after_NAN_label0_count),
                                    (filt_report_before_NAN_label1_count - filt_report_after_NAN_label1_count)]

                 

# report output
print(' > Variable: ' + str(var_name))
print('------------------------------------------------------------------------------')
print(df_filt_report)
print('------------------------------------------------------------------------------')        
