import datetime # get date
import pytz # for datetime timezones

def timestamp_string_to_epoch_milis(string, fmt="%Y-%m-%dT%H:%M:%S.%fZ"):
    """
    Converts timestamp string to epoch milis
    
    :arg string: the timestamp string
    :arg fmt: the format of the timestamp string. Defaults to %Y-%m-%dT%H:%M:%S.%fZ
    """
    # convert timestamp string to datetime
    dt = datetime.datetime.strptime(string, fmt).replace(tzinfo=pytz.utc)
    # get datetime of epoch
    init = datetime.datetime.utcfromtimestamp(0).replace(tzinfo=pytz.utc)
    # calculate diff and return value
    return int((dt - init).total_seconds() * 1000)

def epoch_milis_to_datetime(epoch):
    """
    Converts datetime to epoch milis
    
    :arg dt: the datetime to convert
    """
    # create datetime and return
    return datetime.datetime.utcfromtimestamp(float(epoch)/1000).replace(tzinfo=pytz.utc)

def datetime_to_epoch_milis(dt):
    """
    Converts datetime to epoch milis
    
    :arg dt: the datetime to convert
    """
    # get datetime of epoch
    init = datetime.datetime.utcfromtimestamp(0).replace(tzinfo=pytz.utc)
    # calculate diff and return value
    return int((dt - init).total_seconds() * 1000)

def timestamp_string_to_datetime(string, fmt="%Y-%m-%dT%H:%M:%S.%fZ"):
    """
    Converts timestamp string to datetime
    
    :arg string: the timestamp string
    :arg fmt: the format of the timestamp string. Defaults to %Y-%m-%dT%H:%M:%S.%fZ
    """
    # convert timestamp string to datetime and return
    return datetime.datetime.strptime(string, fmt).replace(tzinfo=pytz.utc)



-----------------------------------------------------------------------------------------------------------------------
## Fabio - datetime in utc [ja sem stresses]
import datetime # get date
import pytz # for datetime timezones
utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc) 
# minus 1 day
utc = datetime.datetime.utcnow().replace(tzinfo=pytz.utc) - datetime.timedelta(days=1) 


